#!/bin/bash
# vim: set ft=sh:
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

if [ -f ~/.bashrc_init_local ]; then
    # shellcheck source=/dev/null
    . ~/.bashrc_init_local
fi

# tmux/screen
# Start a tmux or screen session if not already in one
# Exit directly after the tmux/screen session is exited
# Only run if logged in remotely via ssh
if shopt -q login_shell && [ -n "$SSH_CLIENT" ]; then
    # Only run if running in a terminal.
    if [[ (-t 1) && ("$TERM" != screen*) ]]; then
        if command -v tmux >/dev/null 2>&1; then
            # Attempt to discover a detached session
            # Use the current username as the session name.
            if tmux has-session -t "${USER}" 2>/dev/null; then
                exec tmux attach-session -t "${USER}"
            else
                exec tmux new-session -s "${USER}"
            fi
        elif command -v screen >/dev/null 2>&1; then
            # Attempt to discover a detached session
            exec screen -q -RR
        fi
    fi
fi

# Load system bashrc
if [ -f /etc/bashrc ]; then
    # shellcheck source=/dev/null
    . /etc/bashrc
fi
# for some debian systems
if [ -f /etc/bash.bashrc ]; then
    # shellcheck source=/dev/null
    . /etc/bash.bashrc
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

export VISUAL=vim
export EDITOR=vim

ESC=$(printf "\\e")
# shellcheck disable=SC2034
IANS_DEFAULT_COLOR="$ESC[00m"
# shellcheck disable=SC2034
IANS_GRAY_COLOR="$ESC[37m"
# shellcheck disable=SC2034
IANS_PINK_COLOR="$ESC[35m"
# shellcheck disable=SC2034
IANS_ORANGE_COLOR="$ESC[33m"
# shellcheck disable=SC2034
IANS_RED_COLOR="$ESC[31m"
# shellcheck disable=SC2034
IANS_BLUE_COLOR="$ESC[34m"
# shellcheck disable=SC2034
IANS_GREEN_COLOR="$ESC[32m"

if [ "$(id -u)" == "0" ]; then
    # shellcheck disable=SC2034
    IANS_USER_COLOR=$IANS_RED_COLOR
else
    # shellcheck disable=SC2034
    IANS_USER_COLOR=$IANS_PINK_COLOR
fi

if [ "$(uname)" == "Darwin" ]; then
    # Enable colors on Mac OSX Terminal
    export CLICOLOR=1
    export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
else
    # Enable colors on linux
    eval "$(dircolors -b)"
fi

ians_time() {
    date +"%H:%M:%S%z"
}

ians_vcprompt() {
    export GIT_PS1_SHOWDIRTYSTATE='y'
    export GIT_PS1_SHOWSTASHSTATE='y'
    export GIT_PS1_SHOWUNTRACKEDFILES='y'
    export GIT_PS1_DESCRIBE_STYLE='contains'
    export GIT_PS1_SHOWUPSTREAM='auto'
    export GIT_PS1="$(__git_ps1 '(%s)')"
    if [ "${GIT_PS1}" != "" ]; then
        echo -n " git:${IANS_RED_COLOR}${GIT_PS1}${IANS_DEFAULT_COLOR}"
    fi
}

ians_lastcommandfailed() {
    code=${code:-0}
    if [ "$code" != "0" ]; then
        echo -n "${IANS_GRAY_COLOR} exited ${IANS_RED_COLOR}"
        echo -n "$code"
        echo -n "${IANS_DEFAULT_COLOR}"
    fi
}

# Display the currently active virtualenv
ians_virtualenv() {
    if [ x"$VIRTUAL_ENV" != x ]; then
        echo -n " ${IANS_GRAY_COLOR}(${IANS_RED_COLOR}"
        echo -n "$(basename "${VIRTUAL_ENV}")"
        echo -n "${IANS_GRAY_COLOR})${IANS_DEFAULT_COLOR}"
    fi
}

# Display the currently active gcloud configuration
ians_gcloud() {
    GCLOUD_ACTIVE_CONFIG=~/.config/gcloud/active_config
    if [ -f $GCLOUD_ACTIVE_CONFIG ]; then
        echo -n " ${IANS_GRAY_COLOR}(${IANS_BLUE_COLOR}"
        echo -n "$(cat ${GCLOUD_ACTIVE_CONFIG})"
        echo -n "${IANS_GRAY_COLOR})${IANS_DEFAULT_COLOR}"
    fi
}

ians_prompt() {
    code=$?
    PS1=""

    PS1+='\n${IANS_USER_COLOR}'
    PS1+='\u'
    PS1+='${IANS_GRAY_COLOR}@${IANS_ORANGE_COLOR}\h${IANS_GRAY_COLOR}'
    PS1+=' at ${IANS_DEFAULT_COLOR}'$(ians_time)
    PS1+=$(ians_lastcommandfailed)
    PS1+='${IANS_GRAY_COLOR}'$(ians_vcprompt)$(ians_virtualenv)$(ians_gcloud)'${IANS_DEFAULT_COLOR}'
    PS1+='\n\W\$ '
}

# Create vim swap file directory
if [ ! -d ~/.vimswp ]; then
    mkdir -p ~/.vim/swap
fi
if [ ! -d ~/.vim/backup ]; then
    mkdir -p ~/.vim/backup
fi

# export PIP_REQUIRE_VIRTUALENV=true
#export PIP_USE_MIRRORS=true
export PIP_RESPECT_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE=~/.pip_cache
if [ ! -e ~/.pip_cache ]; then
    mkdir ~/.pip_cache
fi
if [ ! -e ~/.buildout/download-cache ]; then
    mkdir -p ~/.buildout/download-cache
fi
if [ "$HOME" ]; then
    if command -v virtualenvwrapper.sh >/dev/null 2>&1; then
        WORKON_HOME=$HOME/.virtualenvs
        if [ ! -e "$WORKON_HOME" ]; then
            mkdir -p "$WORKON_HOME"
        fi
        export VIRTUALENVWRAPPER_LOG_DIR="$WORKON_HOME"
        export VIRTUALENVWRAPPER_HOOK_DIR="$WORKON_HOME"
        export PIP_VIRTUALENV_BASE="$WORKON_HOME"
        # shellcheck source=/dev/null
        source $(command -v virtualenvwrapper.sh)
    fi
fi

# Create local hgrc file
if [ ! -e ~/.hgrc.local ]; then
    touch ~/.hgrc.local
fi

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# less should never use the bell
LESS="qR"
export LESS

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
# Disable shellcheck for literal line-breaks and single quotes. We
# don't want to expand variables or add line breaks.
PROMPT_COMMAND=ians_prompt

# Set and export gpg tty
GPG_TTY=$(tty)
export GPG_TTY

# ssh-agent
# Start an ssh-agent instance if an existing one isn't found.
mkdir -p ~/.ssh
if [[ -z "$SSH_AUTH_SOCK" ]] && [[ -f ~/.ssh-find-agent ]]; then
    # ssh-find-agent assumes that ~/.ssh/authorized_keys exists
    if [ ! -f ~/.ssh/authorized_keys ]; then
        touch ~/.ssh/authorized_keys
    fi
    # shellcheck source=/dev/null
    . ~/.ssh-find-agent
    ssh_find_agent -a || eval "$(ssh-agent -s)" >/dev/null
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    # shellcheck source=bash/_bash_aliases
    . ~/.bash_aliases
fi
if [ -f ~/.bash_aliases.kubectl ]; then
    # shellcheck source=/dev/null
    . ~/.bash_aliases.kubectl
fi

# Local settings
if [ -f ~/.bashrc.local ]; then
    # shellcheck source=/dev/null
    . ~/.bashrc.local
fi

# Add user-local bin to the PATH but only after running the .profile.local.
# We want ~/bin to be highest priority.
PATH=~/bin:"${PATH}"

# The .local/bin is used for some local installs such as applications installed
# via 'pip install --user'
PATH=~/.local/bin:"${PATH}"

# Go
GOPATH=${HOME}/go
PATH="${GOPATH}/bin:${PATH}"
export GOPATH
if [ -d "${HOME}/opt/go" ]; then
    GOROOT=${HOME}/opt/go
    PATH="${GOROOT}/bin:${PATH}"
    export GOROOT
fi

# Node.js
for d in "${HOME}"/opt/node-*; do
    PATH="${d}/bin:${PATH}"
done

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/opt/google-cloud-sdk/path.bash.inc" ]; then
    # shellcheck source=/dev/null
    source "$HOME"'/opt/google-cloud-sdk/path.bash.inc'
fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/opt/google-cloud-sdk/completion.bash.inc" ]; then
    # shellcheck source=/dev/null
    source "$HOME"'/opt/google-cloud-sdk/completion.bash.inc'
fi

export PATH

# Completion
# Load the system wide bash completion if available.
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    # The system wide config should load our local config.
    # shellcheck source=/dev/null
    . /etc/bash_completion
elif [ -f ~/.bash_completion ]; then
    # The system wide config is not available so just load our completion
    # shellcheck source=bash/_bash_completion
    . ~/.bash_completion
fi

# Print the message if reboot is required.
if [ -f /var/run/reboot-required ]; then
    # Print the message if the file exists
    cat /var/run/reboot-required
fi

# Source the Google cloud devshell bashrc
if [ -f "/google/devshell/bashrc.google" ]; then
    # shellcheck source=/dev/null
    source "/google/devshell/bashrc.google"
fi
