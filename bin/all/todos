#!/bin/bash -eu
#
# Copyright 2017 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BASENAME=$(basename "$0")
EXCLUDE_PATTERNS=("*/vendor/*" "*/third_party/*" "*/node_modules/*" "*/.git/*" "*/.hg/*" "*/.eslintcache" "*/*.js.map")

# Show an error and command line usage.
function show_error() {
    _ERROR="Unknown error."
    if [ "$1" != "" ]; then
        _ERROR=$1
    fi
    echo "$BASENAME: $_ERROR"
    show_usage
    echo "Try '$BASENAME --help' for more information."
}

# Show basic usage.
function show_usage() {
    echo "Usage: ${BASENAME} [PATH] [OPTION]..."
}

# Show full help for the up command.
function show_help() {
    show_usage
    echo "Shows TODOS."
    echo ""
    echo " -e, --exclude=PATTERN              Exclude paths matching PATTERN."
}

# Validates a required arg.
function check_arg_not_empty() {
    _NAME=$1
    _VALUE=$2

    if [[ "$_VALUE" == "" ]]; then
        show_error "$_NAME option requires an argument"
        exit 1
    fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    i="$1"
    case $i in
    -h | --help)
        show_help
        exit 0
        ;;
    -e | --exclude)
        EXCLUDE="$2"
        check_arg_not_empty "-e" "${EXCLUDE}"
        EXCLUDE_PATTERNS+=("${EXCLUDE}")
        shift # past argument
        shift # past value
        ;;
    -e=* | --exclude=*)
        EXCLUDE="${i#*=}"
        check_arg_not_empty "-e" "${EXCLUDE}"
        EXCLUDE_PATTERNS+=("${EXCLUDE}")
        shift # past argument=value
        ;;
    -*)
        show_error "unrecognized option '$1'"
        exit 1
        ;;
    *)
        # unknown option
        # Add as positional argument.
        POSITIONAL+=("$1") # save it in an array for later
        shift
        ;;
    esac
done

if [ -n "${POSITIONAL:-}" ]; then
    set -- "${POSITIONAL[@]}" # restore positional parameters
fi

if [[ "$#" -gt 1 ]]; then
    show_error "Too many positional arguments."
    exit 1
fi

EXCLUDE_FLAGS=()
for e in "${EXCLUDE_PATTERNS[@]}"; do
    EXCLUDE_FLAGS+=("-not" "-path" "${e}")
done

find "${1-.}" "${EXCLUDE_FLAGS[@]}" -type f -exec grep -ne '\(FIXME\|TODO\)\([	 ]*(.*)\)\?:\?' {} /dev/null \; | sed -e 's/:\([0-9]\+\):[	 ]*/:\1: /'
